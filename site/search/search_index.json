{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bonfire Guides","text":"<ul> <li>Welcome</li> <li>Installation</li> <li>App Structure</li> <li>Building Sites</li> <li>Overview</li> <li>Common Functions</li> <li>Assets</li> <li>Alerts</li> <li>View Components</li> <li>Consent</li> <li>Settings</li> <li>View MetaData</li> <li>Building Admin Modules</li> <li>Creating an Admin Modules</li> <li>View Components</li> <li>Filters</li> <li>Recycler</li> <li>Resource Tabs</li> <li>Search</li> <li>Widgets</li> <li>Dashboard Cells</li> <li>User and Security</li> <li>User Meta</li> </ul>"},{"location":"app_structure/","title":"Bonfire Application Structure","text":"<p>Bonfire is based on CodeIgniter 4.2 and uses the default structure of a CodeIgniter application to  ensure it is simple enough for the developer to get used to, if they have prior CodeIgniter experience.  In addition to the standard folder structure, the following two new folders exist: </p> <p>bonfire</p> <p>This forms the guts of Bonfire. All new functionality, libraries, modules, etc that may ship with  Bonfire will live here. This also forms the base <code>Bonfire</code> namespace. </p> <p>themes</p> <p>Holds the view files that define a theme for Bonfire. Themes provide the basic structure of the web  pages, including all of the information that surrounds the actual content. By default, it ships with three themes, <code>admin</code>, <code>app</code>, and <code>auth</code>. </p> <ul> <li>The <code>admin</code> theme is what is used for the Bonfire admin area.</li> <li>The <code>app</code> theme is extremely simple and is meant mostly as a semi-functional  skeleton that you can  leverage as a starting point for your app.</li> <li>The <code>auth</code> theme is more a set of partials that are used for all of the authentication-related screens.     You can specify which theme/layout it should extend. </li> </ul>"},{"location":"app_structure/#admin-url","title":"Admin URL","text":"<p>By default, the admin area can be found by navigating to <code>/admin</code>. This will bring up the admin dashboard. You can change the base path this is found at by changing the <code>ADMIN_AREA</code> constant found in <code>app/Config/Constants.php</code>:</p> <pre><code>/*\n | --------------------------------------------------------------------\n | App Namespace\n | --------------------------------------------------------------------\n |\n | Defines the base path of the URL where Bonfire's admin area can be\n | found. By default, this is 'admin', which means that the admin area\n | would be found at http://localhost:8080/admin\n */\ndefined('ADMIN_AREA') || define('ADMIN_AREA', 'admin');</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>Bonfire is an admin area at heart. It is designed so that you can download it and incorporate into your new or existing CodeIgniter 4 application, modifying everything as you would need to. It uses Composer to install and manage dependencies. These directions assume that you have Composer installed globally. If you do not, then you will need to adjust the commands according to your setup.</p>"},{"location":"installation/#install-codeigniter","title":"Install CodeIgniter","text":"<p>You must have an existing CodeIgniter 4 project already setup. To install a new project, type the following at the command line:</p> <pre><code>&gt; composer create-project codeigniter4/appstarter my-app</code></pre> <p>You need to add the following setting to composer.json:</p> <pre><code>\"minimum-stability\": \"dev\",\n\"prefer-stable\": true</code></pre> <p>This creates a new CodeIgniter 4 project in the <code>my-app</code> directory. Finish any required setup as per the CodeIgniter User Guide.</p>"},{"location":"installation/#install-bonfire","title":"Install Bonfire","text":"<p>Next you need to install Bonfire as a dependency in your project. From your command line type the following:</p> <pre><code>&gt;  composer require lonnieezell/bonfire:dev-develop</code></pre> <p>This will download the latest version and all dependencies.</p>"},{"location":"installation/#run-the-install-script","title":"Run The Install Script","text":"<p>To setup the initial environment, a CLI command is provided to do all of the setup you need to get up and running. From the project root, type:</p> <pre><code>&gt; php spark bf:install</code></pre> <p>This will:</p> <ul> <li>Copy the <code>env</code> file to <code>.env</code> to save your site's customized setting.</li> <li>Set the environment to <code>development</code> so you can see errors and use the Debug Toolbar</li> <li>Prompt you for your site's base url and update the <code>.env</code> file (i.e. http://localhost:8080 or http://bonfire.test)</li> <li>Prompt you for your database credentials and database name, saving that to the <code>.env</code> file</li> <li>Copy all of the Bonfire module config files into your <code>app/Config</code> directory.</li> <li>Copy the theme directories to <code>ROOTPATH/themes</code></li> </ul> <p>Then it will present you with two recommendations:</p> <pre><code>If you need to create your database, you may run:\n    php spark db:create &lt;database name&gt;\n\nTo migrate and create the initial user, please run:\n    php spark bf:install --continue</code></pre> <p>Continuing the installation will then do the following:</p> <ul> <li>Run all migrations so the database is setup and ready to go</li> <li>Prompt you for your super admin name and credentials and create that user in the database.</li> </ul>"},{"location":"installation/#enjoy","title":"Enjoy","text":"<p>That's all that's needed to get started. You can now visit <code>http://localhost:8080/admin</code> and login with your new user.</p>"},{"location":"welcome/","title":"Welcome to Bonfire","text":"<p>Bonfire is here to kickstart the development of your projects providing an admin area, giving you common tools that keep you from reinventing the wheel, while allowing you to focus on the unique business logic of your application.</p> <p>Among the many features and tools it provides are:</p> <ul> <li>Powerful and flexible user authentication system, with either password or personal access tokens</li> <li>Simple theme system with reusable component system</li> <li>Admin area</li> <li>Easily expandable users</li> <li>Meta information that can be stored on per-object basis</li> <li>Quickly add filters to resource lists in the admin</li> <li>Global search feature that you can easily tie your own resources into</li> <li>Global \"recycle bin\" where admins can un-delete or purge soft-deleted resources</li> <li>Cookie Consent framework to help you comply with GDPR</li> <li>Customizable charts and stats for the dashboard</li> <li>A way to provide documentation with your app</li> </ul>"},{"location":"building_admin_modules/","title":"Bonfire - Building Admin Modules","text":"<ul> <li>Creating an Admin Modules</li> <li>View Components</li> <li>Filters</li> <li>Recycler</li> <li>Resource Tabs</li> <li>Search</li> <li>Widgets</li> <li>Dashboard Cells</li> </ul>"},{"location":"building_admin_modules/creating_an_admin_module/","title":"Creating an Admin Module","text":"<p>The bulk of your work in the admin area will likely be done creating new modules of code. Modules are groups of code centered around a single task or resource, like Users, Photos, etc. For the most part, admin modules are like any other bit of module CodeIgniter code, except for a new <code>Module.php</code> file that helps the module integrate into the admin area. Other than that you will be able to take advantage of solutions that allow your code to integrate directly into settings pages, be part of the global search results, automatically display and manage filtering of a resource list, or show up in the Recycler.</p>"},{"location":"building_admin_modules/creating_an_admin_module/#configuring-module-locations","title":"Configuring Module Locations","text":"<p>In order for Bonfire to discover your modules, you need to specify one or more locations that you plan on storing the modules. By default, the system will look within <code>app/Modules</code> for directories. As an example, we could create a Blog folder to store our new blog package. You would then need to create the standard directories, <code>Config</code>, <code>Controllers</code>, <code>Models</code> and <code>Views</code> at the very least. A <code>Module.php</code> file is also expected to live here, which we will look at in more detail a little later. The directory structure would look like:</p> <pre><code>app/\n    Modules/\n        Blog/\n            Config/\n            Controllers/\n            Models/\n            Views/\n            Module.php</code></pre> <p>All files within the Blog directory would be expected to live within the <code>App\\Modules\\{ModuleName}</code> namespace, i.e. <code>App\\Modules\\Blog\\Config\\Routes</code>. You can customize this by editing <code>Config\\Bonfire</code> and changing the key of the <code>$appModules</code> setting within it.</p> <pre><code>public $appModules = [\n    'App\\Modules' =&gt; APPPATH .'Modules',\n];</code></pre> <p>For example, if I would prefer the modules to simply live within my company's namespace, <code>Acme</code>, I could edit the key to reflect that:</p> <pre><code>public $appModules = [\n    'Acme' =&gt; APPPATH .'Modules',\n];</code></pre> <p>If you have multiple locations you need to keep modules, you can add multiple entries here and they will all be automatically discovered and registered within Bonfire.</p>"},{"location":"building_admin_modules/creating_an_admin_module/#the-module-file","title":"The Module File","text":"<p>The Module file handles initialization functions when the admin is loaded. It allows the module to create new menus, insert itself into the existing sidebar menus, etc. The <code>initAdmin</code> method is where all of the setup for displaying and admin page should be done.</p> <pre><code>namespace Acme\\Blog;\n\nuse Bonfire\\Core\\BaseModule;\nuse Bonfire\\Menus\\MenuItem;\n\nclass Module extends BaseModule\n{\n    public function initAdmin()\n    {\n        //\n    }\n}</code></pre>"},{"location":"building_admin_modules/creating_an_admin_module/#adding-a-menu-item","title":"Adding a Menu Item","text":"<p>The main side navigation in the admin consists of three primary menu collections:</p> <ul> <li>a main <code>Content</code> collection where you would place the main page for managing a resource (like Users)</li> <li>the <code>Settings</code> collection where your module's settings pages should live.</li> <li>the <code>Tools</code> collection which holds miscellaneous things that are helpful, but not needed on a daily basis.</li> </ul> <p>Menu items are added to the sidebar using the <code>menus</code> service. Below are two examples taken from the core Users module. They share common setup which will be discussed after the example:</p> <pre><code>// Settings menu for sidebar\n$sidebar = service('menus');\n$item    = new MenuItem([\n    'title'           =&gt; 'Users',\n    'namedRoute'      =&gt; 'user-settings',\n    'fontAwesomeIcon' =&gt; 'fas fa-user',\n    'permission'      =&gt; 'users.settings',\n]);\n$sidebar-&gt;menu('sidebar')-&gt;collection('settings')-&gt;addItem($item);\n\n// Content Menu for sidebar\n$item = new MenuItem([\n    'title'           =&gt; 'Users',\n    'namedRoute'      =&gt; 'user-list',\n    'fontAwesomeIcon' =&gt; 'fas fa-users',\n    'permission'      =&gt; 'users.list',\n]);\n$sidebar-&gt;menu('sidebar')-&gt;collection('content')-&gt;addItem($item);</code></pre> <p><code>MenuItems</code> contain the information about a single menu item. When you create a new one you have the following settings available to you:</p> <ul> <li><code>title</code> is the string that will be displayed to the user in the Menu</li> <li><code>namedRoute</code> is the route that will be called when the link is clicked. You must use a   named route which should be defined   within your module's <code>Config/Routes</code> file.</li> <li><code>fontAwesomeIcon</code> is used to specify the FontAwesome icon that will be displayed in the sidebar.</li> <li><code>permission</code> is used to specify a permission string that is required for a user to see that link. If they do not have   the proper permissions the link will not be displayed within the menu. If this item should be available to everyone   leave it blank.</li> </ul> <p>One the MenuItem has been created, you add it to the appropriate menu/collection.</p>"},{"location":"building_admin_modules/dashboard_cells/","title":"Dashboard Cells","text":"<p>You can customize the dashboard with the use of view cells. You can specify which cells to display by editing the <code>Bonfire\\Dashboard\\Config\\Dashboard</code> config class;</p> <pre><code>class Dashboard extends BaseConfig\n{\n    public array $cells = [\n        'Bonfire\\Dashboard\\DashboardCells::quickLinks',\n        'Bonfire\\Widgets\\Cells\\WidgetCells::stats',\n        'Bonfire\\Widgets\\Cells\\WidgetCells::charts',\n    ];\n}</code></pre> <p>The cells are displayed in the order listed, from top to bottom in the Dashboard. You can comment out any class to have it not show. The stats and charts cells that come on by default are used to display the widgets, that can be configured in the admin area.</p>"},{"location":"building_admin_modules/dashboard_cells/#creating-the-cell","title":"Creating the Cell","text":"<p>The cells are very simple class methods that return the HTML or <code>view()</code> results. Here is the Quick Links cell as an example:</p> <pre><code>class DashboardCells\n{\n    /**\n     * Displays a selection of \"Quick Links\" in the admin dashboard.\n     * This is a view cell that uses the \"content\" sidebar menu\n     * items to determine the links to show.\n     */\n    public function quickLinks()\n    {\n        return view('Bonfire\\Dashboard\\Views\\quick_links', [\n            'menu' =&gt; service('menus')-&gt;menu('sidebar')-&gt;collection('content'),\n        ]);\n    }\n}</code></pre>"},{"location":"building_admin_modules/filters/","title":"Filters","text":"<p>Every collection of items needs to be filtered at some point. Unless you're building a photo gallery or an ecommerce site this might be when presenting posts, users, pages, etc in the admin area. Filtering allows you to specify which columns can be filtered and then pass your model to a view cell that takes care of handling the display of the filters for you. This ensures a consistent look and functionality in the UI while providing the least amount of work when you need to create a UI in a hurry.</p>"},{"location":"building_admin_modules/filters/#specifying-filterable-columns","title":"Specifying Filterable Columns","text":"<p>You specify the available filters within your Model, using a class property named <code>filters</code>.</p> <pre><code>protected $filters = [\n    'column_name' =&gt; [\n        'title' =&gt; 'Column Title',\n        'type' =&gt; 'radio',\n        'options' =&gt; ['one' =&gt; 'Option 1', 'two' =&gt; 'Option 2']\n    ],\n    'column_two' =&gt; [\n        'title' =&gt; 'Column Title',\n        'options' =&gt; 'methodName'\n    ]\n];</code></pre> <p>The key of each array element is the name of the <code>column</code> that you wish to filter on. The column must be within the table for the model (see below for other options). It is then described by an array with the keys <code>title</code>, <code>options</code>, and  optional key <code>type</code>.  Title is the display title for that group of options. The <code>options</code> value is typically an array of keys and their display values that the column should be filtered by. The keys must match valid values within the database. Key <code>type</code> signifies if the filter should be composed of checkboxes (default) or radio's. If it is omitted, the default value <code>checkbox</code> would be  assumed. In case <code>type</code> =&gt; <code>radio</code> is specified, the last option in the <code>options</code> array will be pre-selected in the filter UI, so it should probably contain value representing all entries.</p> <p>Sometimes you need to pull values from a config file, or another table, etc, in order to provide the list of options. In this case, you can use the string <code>methodName</code> where <code>methodName</code> is a method within the model to call that returns the list of options.</p>"},{"location":"building_admin_modules/filters/#implementing-the-filters","title":"Implementing the Filters","text":"<p>If all the columns match directly to columns within the model's database table, then you can make use of the <code>Filterable</code> trait, which implements a basic <code>filter()</code> method for you.</p> <p>Since model's can get crowded with test data, filter data, custom methods, events, and more, you can split out the filter functionality into a new class that extends the model, placing your custom filter logic within that class.</p> <pre><code>use App\\UserModel;\nuse Bonfire\\Traits\\Filterable;\n\nclass UserFilter extends UserModel\n{\n    use Filterable;\n\n    public $filters = [\n        ...\n    ];\n\n    /**\n     * A computed options function\n     */\n    protected function computeFilterA()\n    {\n        //\n    }\n}</code></pre>"},{"location":"building_admin_modules/filters/#complex-filter-columns","title":"Complex Filter Columns","text":"<p>There are many times that you'll need to show options that don't directly relate to the model at hand. In this case you must override the  <code>filter()</code> method on the model. Within that method you must handle all of the cases for the options you provided manually, returning the query object.</p> <pre><code>public function filter(array $params)\n{\n    $query = $this-&gt;builder();\n\n    if (isset($params['foo']) &amp;&amp; ! empty($params['foo'])) {\n        $query-&gt;whereIn('foo', $params['foo']);\n    }\n\n    return $query;\n}</code></pre>"},{"location":"building_admin_modules/filters/#displaying-filters-in-the-admin","title":"Displaying Filters in the Admin","text":"<p>There are 4 parts that are needed to get a working, filterable list of resources in the admin area.</p>"},{"location":"building_admin_modules/filters/#the-route","title":"The Route","text":"<p>The main route for your resource list page must support both GET and POST methods.</p> <pre><code>$routes-&gt;match(['get', 'post'], 'users', 'UserController::list', ['as' =&gt; 'user-list']);</code></pre> <p>The controller should then choose between sending either a full HTML page for a GET request, or just sending back the table for POST requests. You might do it something like:</p> <pre><code>public function list()\n{\n    $userModel = model('UserFilter');\n\n    // Performs the actual filtering of the results.\n    $userModel-&gt;filter($this-&gt;request-&gt;getPost('filters'));\n\n    $view = $this-&gt;request-&gt;getMethod() == 'post'\n        ? $this-&gt;viewPrefix .'_table'\n        : $this-&gt;viewPrefix .'list';\n\n    return $this-&gt;render($view, [\n        'headers' =&gt; [\n            'email' =&gt; 'Email',\n            'name' =&gt; 'Name',\n            'groups' =&gt; 'Groups',\n            'last_login' =&gt; 'Last Login'\n        ],\n        'showSelectAll' =&gt; true,\n        'users' =&gt; $userModel-&gt;paginate(setting('Site.perPage')),\n        'pager' =&gt; $userModel-&gt;pager,\n    ]);\n}</code></pre>"},{"location":"building_admin_modules/filters/#the-view","title":"The View","text":"<p>Within your view there are 3 things to do.</p> <p>First, ensure that the table with your resource list is wrapped in a div that uses some Alpine.js to attach a <code>filtered</code> status of <code>false</code> to the div. This creates a variable that determines whether the filters list is shown or not.</p> <p>Second, insert the <code>x-filter-link</code> component into the top of that div. This provides the link that will show/hide the list of filters. This component toggles the <code>filtered</code> value above between <code>true</code> and <code>false</code>.</p> <p>Finally, call the <code>renderList</code> view cell which inserts the HTML for the list of options, all wrapped in a form that calls your controller method via AJAX and updates the list of items without a page refresh, using some htmx magic. When calling this, you must supply the ID of the div that surrounds the table of results as the <code>target</code>.</p> <p>Here's how this is used for the list of users within Bonfire.</p> <pre><code>&lt;div x-data=\"{filtered: false}\"&gt;\n    &lt;x-filter-link /&gt;\n\n    &lt;div class=\"row\"&gt;\n        &lt;!-- List Users --&gt;\n        &lt;div class=\"col\" id=\"user-list\"&gt;\n            &lt;?= $this-&gt;include('Bonfire\\Users\\Views\\_table') ?&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Filters --&gt;\n        &lt;div class=\"col-auto\" x-show=\"filtered\" x-transition.duration.240ms&gt;\n            &lt;?= view_cell('Bonfire\\Libraries\\Cells\\Filters::renderList', 'model=UserFilter target=#user-list') ?&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre>"},{"location":"building_admin_modules/recycler/","title":"The Recycler","text":"<p>The Recycler provides an area where users can browse objects that have been deleted and either restore or purge them.  The models for these resources must have soft deletes enabled. By default, only users are displayed here. </p> <pre><code>// In the model:\nprotected $useSoftDeletes = true;</code></pre>"},{"location":"building_admin_modules/recycler/#registering-a-resource","title":"Registering A Resource","text":"<p>The Recycler must be told which models it should display. You do not need to do anything special with a model before registering. You can specify models within <code>app/Config/Recycler.php</code>: </p> <pre><code>public $resources = [\n    'users' =&gt; [\n        'label' =&gt; 'Users',\n        'model' =&gt; App\\Models\\UserModel::class,\n        'columns' =&gt; [\n            'username', 'first_name', 'last_name', 'email'\n        ]\n    ],\n];</code></pre> <p>The key of the array is the alias that you would use to specify the default resource to show when visiting the Recycler. Each entry must contain an array that gives additional information that allows it to be displayed. </p> <p>label is the name as it should be displayed to the users. </p> <p>model is the fully qualified classname of the model to get this resource's data from.</p> <p>columns is an array of database column names for this resource that will be displayed on the Recycler table.  This information should only be what is needed to allow someone to find the correct record. </p>"},{"location":"building_admin_modules/recycler/#localization-of-column-names-in-recycler","title":"Localization of Column names in Recycler","text":"<p>To localize the column names, an array <code>recycler</code> should be created in the module's language file, named after the <code>$resource['label']</code> value (with the <code>.php</code> extension (in case of label 'Users' \u2013 Users.php). The array should have sub-keys <code>label</code> and <code>columns</code>, with each column name corresponding <code>$resource['columns']</code> array value. Example for module Users:</p> <pre><code>    'recycler' =&gt; [\n        'label'     =&gt; 'Users',\n        'columns'   =&gt; [\n            'id'           =&gt; 'ID',\n            'username'     =&gt; 'User Name',\n            'first_name'   =&gt; 'Name',\n            'last_name'    =&gt; 'Surname',\n            'email'        =&gt; 'Email Addr',  \n        ],\n    ],</code></pre> <p>If Recycler finds the localized strings, it will use them. Otherwise the original DB column names (first letter capitalized, undescore replaced with space) will be used.</p>"},{"location":"building_admin_modules/recycler/#modifying-the-recycler-query","title":"Modifying the Recycler Query","text":"<p>When the Recycler displays its records, it does a paginated search of deleted resources on the table specified within the model. The results are ordered by the deteted at date and returned as arrays. </p> <p>There will be times when you need to modify this query. While the basics mentioned above cannot be changed without breaking functionality, you can add requirements, or specify the fields to select, etc. This can be achieved by creating a new method on the model, <code>setupRecycler</code>. This doesn't take any arguments, and should return the modified model. </p> <p>Here is an example from the <code>UserModel</code> that pulls in the <code>email</code> field from the <code>auth_identities</code> table.  </p> <pre><code>public function setupRecycler()\n{\n    return $this-&gt;select(\"users.*, \n        (SELECT secret \n            from auth_identities \n            where user_id = users.id\n                and type = 'email_password'\n            order by last_used_at desc \n            limit 1\n        ) as email\n   \");\n}</code></pre>"},{"location":"building_admin_modules/recycler/#overriding-the-restore","title":"Overriding the Restore","text":"<p>You may override the default handling of the restore process if you have needs outside simply setting the  <code>deleted_at</code> date to <code>null</code>. You can do this by providing a method named <code>recyclerRestore()</code> to the model.  This method only accepts a single argument: the record primary key. </p> <pre><code>public function recyclerRestore(int $id) \n{\n    return $this-&gt;where('id', $id)\n        -&gt;set('deleted_at', null)\n        -&gt;update();\n}</code></pre>"},{"location":"building_admin_modules/recycler/#overriding-the-purge","title":"Overriding the Purge","text":"<p>You may override the default handling of the purge process if you have needs outside simply setting the deleting the record. You can do this by providing a method named <code>recyclerPurge()</code> to the model. This method only accepts a single argument: the record primary key.</p> <pre><code>public function recyclerPurge(int $id) \n{\n    return $this-&gt;delete($id, true);\n}</code></pre>"},{"location":"building_admin_modules/resource_tabs/","title":"Resource Tabs","text":"<p>Resource tabs are the tabs that are displayed when editing a resource, like an individual User or User Group.  They make it possible for you to easily integrate other tabs onto a user without editing the core theme. </p> <p>Adding a new tab is typically done from the <code>Module.php</code> for your module. You only need 3 pieces of information to create a new tab: a title, the URL to send them to, and (optionally) a permission to check against to see  if they can see the tab or not.</p> <pre><code>use \\Bonfire\\Resources\\ResourceTab;\n\npublic function initAdmin() \n{\n    service('resourceTabs')-&gt;addTabFor('user', new ResourceTab([\n        'title' =&gt; 'Permissions',\n        'url' =&gt; 'users/(id)/permissions',\n        'permission' =&gt; 'users.edit'\n    ]));\n}</code></pre> <p>The <code>title</code> is what is displayed to the user on the tab itself.</p> <p>If it is set, <code>permission</code> will check the current user against that permission. If they have the permission then the tab will display, otherwise it will not be rendered.</p> <p>When setting the URL there are a few things to note: </p> <ol> <li>The <code>ADMIN_AREA</code> constant will be prefixed to the URl you provide. </li> <li>To represent the ID of the resource you want to provide the tab to, use the <code>(id)</code> placeholder. This will     be replaced by the ID of the current user being edited, by analyzing the current URL.</li> </ol> <p>As an example, assuming you were on the current url <code>/admin/users/123</code>, the above URL would be  <code>/admin/users/123/permissions</code>.</p>"},{"location":"building_admin_modules/search/","title":"Search","text":"<p>Bonfire provides a flexible search system that is highlighted on all areas of the admin area. In order to make this as powerful as possible, any module may integrate into the search results, both by adding filters for the Advanced Search form, and by providing results that will be displayed.</p>"},{"location":"building_admin_modules/search/#providing-search-results","title":"Providing Search Results","text":"<p>The most basic integration is to register your module as a search provider. This is done by creating a class at the root of your module's code called <code>SearchProvider</code>. It must extend <code>Bonfire\\Search\\Interfaces\\SearchProviderInterface</code> and fill in a few small methods.</p> <pre><code>&lt;?php\n\nnamespace Bonfire\\Users;\n\nuse Bonfire\\Search\\Interfaces\\SearchProviderInterface;\nuse App\\Models\\UserModel;\n\nclass SearchProvider extends UserModel implements SearchProviderInterface\n{\n    /**\n     * Performs a primary search for just this resource.\n     *\n     * @param string     $term\n     * @param int        $limit\n     * @param array|null $post\n     *\n     * @return array\n     */\n    public function search(string $term, int $limit=10, array $post=null): array\n    {\n        //\n    }\n\n    /**\n     * Returns the name of the resource.\n     *\n     * @return string\n     */\n    public function resourceName(): string\n    {\n        return 'users';\n    }\n\n    /**\n     * Returns a URL to the admin area URL main list\n     * for this resource.\n     *\n     * @return string\n     */\n    public function resourceUrl(): string\n    {\n        return ADMIN_AREA .'/users';\n    }\n\n    /**\n     * Returns the name of the view to use when\n     * displaying the list of results for this\n     * resource type.\n     *\n     * @return string\n     */\n    public function resultView(): string\n    {\n        return 'Search/users';\n    }\n}</code></pre> <p>search()</p> <p>Given the search term it will return an array of any search results for this resource type. You'll see this SearcProvider extends the UserModel. It is not necessary to do so, but is a simple way to get access to the model features when you need them.</p> <p>resourceName()</p> <p>The name of the resource. This is displayed as a header on the search results page where it shows the top 10 results from all search providers.</p> <p>resourceUrl()</p> <p>Returns the relative URL to the main page for this resource. In this case it takes you to the list of users.</p> <p>resultView()</p> <p>Returns the name of the view that should be used to display the results on the overview page. This MUST be in the Admin theme folder in order to be found. This can be a fairly straight-forward view file:</p> <pre><code>&lt;table class=\"table table-hover\"&gt;\n    &lt;?= $this-&gt;setData(['headers' =&gt; [\n        'email' =&gt; 'Email',\n        'username' =&gt; 'Username',\n        'groups' =&gt; 'Groups',\n        'last_active' =&gt; 'Last Active'\n    ]])-&gt;include('_table_head') ?&gt;\n    &lt;tbody&gt;\n    &lt;?php foreach($rows as $user) : ?&gt;\n        &lt;tr&gt;\n            &lt;?= view('Bonfire\\Users\\Views\\_row_info', ['user' =&gt; $user]) ?&gt;\n        &lt;/tr&gt;\n    &lt;?php endforeach ?&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;</code></pre>"},{"location":"building_admin_modules/view_components/","title":"View Components","text":"<p>View Components (or just Components) allow you to create custom HTML elements to use within your views. The main  description of their use and creating new ones is described within the <code>Building Sites</code> section of the guide. This page lists the components that are available within the default <code>Admin</code> theme. </p>"},{"location":"building_admin_modules/view_components/#available-components","title":"Available Components","text":"<p>&lt;x-admin-box&gt;</p> <p>This wraps the content sections within the admin area. In the default theme it is the white box with rounded  corners that you see everywhere. </p> <p>&lt;x-filter-link&gt;</p> <p>This is used by the Filters system to show the link that display or hides the filters in a resource list page. </p> <p>&lt;x-filter-list&gt;</p> <p>This is the box that wraps the list of filters in a resource list page. </p> <p>&lt;x-module-title&gt;</p> <p>This is used within the admin page headers to display the main page title. </p> <p>&lt;x-button&gt;</p> <p>This is used within the admin forms to add pre-styled buttons (configurable via attributes <code>color</code> (any pre-defined Bootstrap 5 color, like <code>primary</code>, <code>secondary</code>, <code>success</code>, etc., defaulting to <code>primary</code>) and <code>type</code> (defaults to <code>submit</code>, but can also be <code>reset</code>, <code>button</code>, etc.).</p> <p>&lt;x-button-container&gt;</p> <p>Wrapper for form button area enforcing uniform margins.</p> <p>&lt;x-page-head&gt;</p> <p>This wraps the page header on admin pages. </p> <p>&lt;x-sidebar&gt;</p> <p>This is the main view that renders the sidebar and all links within it.</p>"},{"location":"building_admin_modules/widgets/","title":"Widgets","text":"<p>Widgets are elements that display information on the dashboard. They are either a small informational card, or a chart of some sort.</p>"},{"location":"building_admin_modules/widgets/#configuration","title":"Configuration","text":"<p>Some settings are available in the administration settings area. Each type of widget has its own specific settings, which can be used to specify which information is displayed for the widget, as well as whether it's animated, where labels are displayed, etc.</p>"},{"location":"building_admin_modules/widgets/#statistic-widget","title":"Statistic widget","text":"<p>The first widget is the statistics widget, which is just a counter with a shortcut that allows me to open the list of elements of a module. It could be used to display a year-to-day revenue at a glance, total number of users in the system, new users this month, or any other simple statistic.</p> <p>Adding a new widget is done by editing the <code>initAdmin</code> method of your <code>Module.php</code> file, similar to adding a menu:</p> <pre><code>// Settings widgets stats on dashboard\n$widgets = service('widgets');\n$users = new UserModel();\n$statsItem = new StatsItem([\n    'bgColor' =&gt; 'bg-blue',\n    'title' =&gt; 'Users',\n    'value' =&gt; $users-&gt;countAll(),\n    'url' =&gt; ADMIN_AREA . '/users',\n    'faIcon' =&gt; 'fa fa-user',\n]);\n$widgets-&gt;widget(\"stats\")-&gt;collection('stats')-&gt;addItem($statsItem);</code></pre> <p>bgColor</p> <p>bgColor represents the background color of the widget. The available options are:</p> <pre><code>- bg-blue\n- bg-red\n- bg-orange\n- bg-light\n- bg-dark\n- bg-inverse\n- bg-indigo\n- bg-purple\n- bg-pink\n- bg-yellow\n- bg-green\n- bg-teal\n- bg-lime\n- bg-cyan\n- bg-white\n- bg-gray\n- bg-gray-dark</code></pre> <p>title</p> <p>The title of the widget displayed at the top left</p> <p>value</p> <p>The value of the widget displayed under the title: typically the total number of records</p> <p>url</p> <p>The address that displays the list of objects on your module. It will be associated with the word \"view detail\"</p> <p>faIcon</p> <p>The FontAwesome icon</p>"},{"location":"building_admin_modules/widgets/#configuration_1","title":"Configuration","text":"<p>All settings are available in the <code>Bonfire\\Widgets\\Config\\Stats</code> class, or in the admin settings area.</p> <p>In the administration settings area, you can choose to: - Display the \"View Detail\" link</p>"},{"location":"building_admin_modules/widgets/#charts-widget","title":"Charts widget","text":"<p>Adding a new chart widget is done in the <code>initAdmin</code> method of your <code>Module.php</code> file, similar to adding a menu:</p> <pre><code>$statsItem = new ChartsItem([\n    'title'   =&gt; 'User classification by group',\n    'type'   =&gt; 'line',\n    'cssClass'   =&gt; 'col-6',\n]);\n$statsItem-&gt;addDataset('auth_groups_users', 'group', 'user_id');\n$widgets-&gt;widget('charts')-&gt;collection('charts')-&gt;addItem($statsItem);</code></pre> <p>title</p> <p>The title of the chart displayed at the top center</p> <p>type</p> <p>The type of chart. The available options are: <pre><code>- line\n- bar\n- doughnut\n- pie\n- polarArea</code></pre></p> <p>cssClass</p> <p>Set the width of the chart. Examples options are: <pre><code>- col-3\n- col-6\n- col-9\n- col-12</code></pre></p> <p>addDataset(string $tableName, string $groupField, string $countField, string $selectMode = 'count')</p> <p>Currently, only one dataset can be added to the chart. The required parameters are:</p> <ul> <li>Name of the table</li> <li>Grouping field</li> <li>Field to count</li> </ul> <p>It is possible to indicate a fourth parameter to choose the counting mode; the possible values are:</p> <pre><code>- count\n- avg\n- max\n- min\n- sum</code></pre> <ul> <li>if indicate count then selectCount($field) is executed</li> <li>if indicate avg then selectAvg($field)  is executed</li> <li>if indicate max then selectMax($field)  is executed</li> <li>if indicate min then selectMin($field)  is executed</li> <li>if indicate sum then selectSum($field)  is executed</li> </ul>"},{"location":"building_admin_modules/widgets/#configuration_2","title":"Configuration","text":"<p>All settings are available in the administration settings area.</p> <p>Each type of widget has its own specific settings.</p>"},{"location":"building_admin_modules/widgets/#charts","title":"Charts","text":"<p>Line Chart</p> <p>You can set the default values in the <code>Bonfire\\Widgets\\Config\\LineChart</code> Class</p> <p>In the administration settings area, you can choose to: - Display the title - View the legend - Choose the location of the legend - Enable animation - You can choose the value of the tension: Bezier curve tension of the line. Set to 0 to draw straightlines.</p> <p>Advanced settings:</p> <ul> <li>You can set Line color</li> <li>You can set Line width</li> </ul> <p>Bar Chart</p> <p>You can set the default values in the <code>Bonfire\\Widgets\\Config\\BarChart</code> Class</p> <p>In the administration settings area, you can choose to: - Display the title - View the legend - Choose the location of the legend - Enable animation - Assign a predefined color scheme to fill the chart</p> <p>Doughnut Chart</p> <p>You can set the default values in the <code>Bonfire\\Widgets\\Config\\DoughnutChart</code> Class</p> <p>In the administration settings area, you can choose to: - Display the title - View the legend - Choose the location of the legend - Enable animation - Assign a predefined color scheme to fill the chart</p> <p>Pie Chart</p> <p>You can set the default values in the <code>Bonfire\\Widgets\\Config\\PieChart</code> Class</p> <p>In the administration settings area, you can choose to: - Display the title - View the legend - Choose the location of the legend - Enable animation - Assign a predefined color scheme to fill the chart</p> <p>Polar Area Chart</p> <p>You can set the default values in the <code>Bonfire\\Widgets\\Config\\PolarAreaChart</code> Class</p> <p>In the administration settings area, you can choose to: - Display the title - View the legend - Choose the location of the legend - Enable animation - Assign a predefined color scheme to fill the chart</p>"},{"location":"building_sites/","title":"Bonfire - Building Sites","text":"<ul> <li>Overview</li> <li>Common Functions</li> <li>Assets</li> <li>Alerts</li> <li>View Components</li> <li>Consent</li> <li>Settings</li> <li>View MetaData</li> </ul>"},{"location":"building_sites/alerts/","title":"Alerts","text":"<p>Bonfire uses Tatter\\Alerts to provide support for simple alerts. The usage is simple: </p> <pre><code>alert('success', 'Your message goes here.');</code></pre> <p>This displays a green message that appears in the top-right corner of the admin area. The first argument (<code>success</code>) specifies a Bootstrap alert type that is added to the class automatically to specify how it looks. The second argument is the content that should be in the alert and can be a single string or an array of strings to apply multiple alerts.</p> <p>Additionally, you can use flash messages in the session to trigger alerts.  This would typically be used during a redirect: </p> <pre><code>return redirect()-&gt;back()-&gt;with('message', 'It worked!');\nreturn redirect()-&gt;back()-&gt;with('error', 'Did not work');\nreturn redirect()-&gt;back()-&gt;with('error', ['not good', 'nope', 'cannot do it']);</code></pre> <p>When an array is used it will display a new alert for each element in the array.</p> <p>You can adjust which session variables are checked and their class mapping using the Alerts config file. Read more in the docs at the repo linked above.</p>"},{"location":"building_sites/assets/","title":"Asset Management","text":"<p>Bonfire provides a simple assets system that was created to solve two main challenges:</p> <ol> <li>We should be able to serve CSS/JS assets from anywhere. While this is primarily for use by themes, it could serve many purposes.</li> <li>How to easily handle browser caching/cache-busting with updated assets.</li> </ol> <p>And try to do this in the simplest way possible.</p> <p>For the examples, we will link to assets for the Admin theme.</p>"},{"location":"building_sites/assets/#linking-to-assets","title":"Linking to assets","text":"<p>Within your views you can link to assets anywhere within your project with the <code>asset()</code> or <code>asset_link()</code> helper function. <code>asset_link()</code> takes two arguments. The first is the path to the file to load. The first segment of this path must be one of the defined <code>$folders</code> in the configuration file. The rest of the path would be based on the actual file structure within that location. For the <code>Admin</code> theme, a folder has been defined called <code>admin</code>. Both the <code>Auth</code> and <code>App</code> themes have similar folders already defined.  </p> <p>The second argument is the type of asset being loaded. This tells it how the resulting link should be formed. Currently, it only supports <code>css</code> and <code>js</code> files.</p> <pre><code>&lt;?= asset_link('admin/css/admin.css', 'css') ?&gt;\n&lt;?= asset_link('admin/js/admin.js', 'js') ?&gt;</code></pre> <p>The <code>asset()</code> function is similar, except it only returns the URL. This is helpful as the function also inserts a string within the filename that helps browsers cache the file, but that will change when the file is updated so the browser knows to grab a fresh copy of the file.</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"&lt;?= asset('admin/css/admin.css', 'css') ?&gt;\" /&gt;\n&lt;script src=\"&lt;?= asset('admin/js/admin.js', 'js') ?&gt;\"&gt;&lt;/script&gt;</code></pre>"},{"location":"building_sites/assets/#configuration","title":"Configuration","text":"<p>The <code>Config\\Assets</code> class has a handful of settings to customize the experience.</p>"},{"location":"building_sites/assets/#bustingtype","title":"$bustingType","text":"<p>When a link is generated it includes a string within the filename for cache-busting reasons. This would look something like: <code>https://localhost:8080/admin/css/admin~~213264216523.css</code>. The config setting, <code>$bustingType</code> defines how this string is derived. It has two possible values, either <code>file</code> or <code>version</code>.</p> <p>The <code>file</code> setting will examine the requested file and use the file modified date/time as the basis, and convert it to a Unix timestamp. This is the easiest value to use as it is automatically updates itself based on the file. However, it does force an extra file read, and the overhead needed to get the information from the file. On many small to medium sites this is likely just fine. However, large sites, or sites that require every ounce of performance, may want to use the <code>version</code> method.</p> <p>The <code>version</code> method requires the developer to set a new version in the configuration file whenever new code is ready to deploy to staging or production environments. See the next setting for details. To make this easier during development the current timestamp is used in testing/development environments ensuring that no caching will happen. In other environments it inserts the version number that was specified.</p>"},{"location":"building_sites/assets/#separator","title":"$separator","text":"<p>The <code>$separator</code> setting allows the app to detect the part of the asset file name that was  added for cache-busting purposes. It can be a single web-safe non-reserved character or  a combination of such characters (characters that are allowed in a URI, but do not have  a reserved purpose) that DOES NOT OCCUR in your asset file names (like <code>~</code>, <code>-</code>  or <code>_</code> or any combination of ASCII letters and numbers). Separator will be inserted  before the file version/timestamp, in between the file name and file extension.</p>"},{"location":"building_sites/assets/#versions","title":"$versions","text":"<p>The <code>$versions</code> setting allows you to define the version number for <code>css</code> and <code>js</code> separately. This value is used as the cache-busting string when the <code>version</code> busting type is used.</p> <pre><code>public $versions = [\n    'css' =&gt; '1.0',\n    'js' =&gt; '1.0',\n];</code></pre>"},{"location":"building_sites/assets/#folders","title":"$folders","text":"<p>This values is where you define the folders that are looked in linking to an asset. Folders for all themes and the vendor folder are setup by default.</p> <pre><code>public $folders = [\n    'app' =&gt; ROOTPATH.'themes/app',\n    'admin' =&gt; ROOTPATH.'themes/Admin',\n    'auth' =&gt; ROOTPATH.'themes/Auth',\n    'other' =&gt; ROOTPATH.'vendor',\n];</code></pre>"},{"location":"building_sites/assets/#route-conflict-warning","title":"Route Conflict Warning","text":"<p>To make this all work, a route is specified at <code>/assets/(:any)</code> to capture the request. The assets system will not work if you override this route in your own application. I think for most sites this should not be a problem.</p>"},{"location":"building_sites/common_functions/","title":"Common functions","text":"<p>Bonfire provides a few helper functions that are always available for your use.</p> <p>app_date($date)</p> <p>This helper will display a date based on the current settings in the General Settings page for date format and the  application's current timezone. You can pass a string with the date, a DateTime object, or a CodeIgniter\\i18n\\Time  instance as the first argument.</p> <pre><code>echo app_date('2021-01-15 15:35:00');\n// outputs: 01/15/2021\n\n$date = new DateTime('2021-01-15 15:35:00');\necho app_date($date);\n\n$date = new CodeIgniter\\i18n\\Time('2021-01-15 15:35:00');\necho app_date($date);</code></pre> <p>You can include the time, formatted as specified in General Settings, by passing <code>true</code> as the second argument.</p> <pre><code>echo app_date($date, true);\n// outputs: 01/15/2021 3:35 PM</code></pre> <p>You can further include the timezone by passing <code>true</code> as the third argument.</p> <pre><code>echo app_date($date, true, true);\n// outputs: 01/15/2021 3:35 PM CST</code></pre>"},{"location":"building_sites/components/","title":"View Components","text":"<p>View Components (or just Components) allow you to create custom HTML elements to use within your views. </p>"},{"location":"building_sites/components/#self-closing-tags","title":"Self-Closing Tags","text":"<p>At their most basic, components serve as dynamic templates that allow you to reduce the typing in your  application. This can help boil longer, complex sections down to a single HTML tag. This is especially useful with CSS utility frameworks like TailWind, or when using the utilities in Bootstrap 5, etc. Using components in these situations allows you to keep the style info in one place where making changes to  one file changes every instance of the view throughout the application.</p> <p>To create a component, simply create a new view file within the theme's <code>Component</code> directory, or the  application's, <code>app/Components</code> directory.</p> <p>A simple avatar image might look something like this: </p> <pre><code>// app/Components/avatar.php\n&lt;img\n  src=\"&lt;?= $src ?? '' ?&gt;\"\n  class=\"rounded-circle shadow-4\"\n  style=\"width: &lt;?= $width ?? '150px' ?&gt;;\"\n  alt=\"&lt;?= $alt ?? '' ?&gt;\"\n/&gt; </code></pre> <p>When using the component within a view, you would insert a tag with <code>x-</code> prepended to the filename: </p> <pre><code>&lt;x-avatar src=\"&lt;?= $user-&gt;avatarUrl() ?&gt;\" alt=\"&lt;?= $user-&gt;name ?&gt;\" /&gt;</code></pre> <p>Any attributes provided when you insert the component like this are made available as variables within  the component view. In this case, the <code>$src</code> and <code>$alt</code> attributes are passed to the component view, resulting in the following output: </p> <pre><code>&lt;img\n  src=\"http://example.com/avatars/foo.jpg\"\n  class=\"rounded-circle shadow-4\"\n  style=\"width: 150px\"\n  alt=\"John Smith\"\n/&gt; </code></pre>"},{"location":"building_sites/components/#custom-tags","title":"Custom Tags","text":"<p>You can include the content within the opening and closing tags by inserting the reserved <code>$slot</code> variable: </p> <pre><code>&lt;x-green-button&gt;Click Me!&lt;/x-green-button&gt;</code></pre> <pre><code>// app/Components/green-button.php\n&lt;button class=\"btn btn-success\"&gt;\n    &lt;?= $slot ?&gt;\n&lt;/button&gt;</code></pre>"},{"location":"building_sites/components/#controlled-components","title":"Controlled Components","text":"<p>Finally, you can create a class to add additional logic to the output. The file must be in the same directory as the component view, and should have a name that is the PascalCase version of the filename, with 'Component' added to the end of it. </p> <p>A <code>famous-qoutes</code> component would have a view called <code>famous-quotes.php</code> and a controlling class called <code>FamousQuotesComponent.php</code>. The class must extend <code>Bonfire\\View\\Component</code>. The only requirement is that you  implment a method called <code>render()</code>. </p>"},{"location":"building_sites/consent/","title":"Consent","text":"<p>With the Global Data Protection Regulation and other data privacy regulations being put in place across the globe, you have various requirements as web developers that you didn't use to. The Consent module helps you manage collecting consent from the user before storing any cookies through an opt-in system for all non-required cookies. It provides the mechanism for displaying the consent form, and recording the user's preferences. A helper  method, <code>has_consent</code>, is provided so that you can easily meet the consent requirements when building your site.</p>"},{"location":"building_sites/consent/#using-the-helper","title":"Using the Helper","text":"<p>The helper is loaded automatically by the BaseController. As long as you extend the BaseController (or one of its  children, like the AuthController) then you do not need to explicitly load the helper.</p> <p>The helper can be used both within the views and the controllers to limit which services are called (like ad-tracking or analytics) and which cookies you set. </p> <p>Within a view you might wrap Google Analytics tag withn a check against the <code>performing</code> consent: </p> <pre><code>&lt;?php if (has_consent('performing')) : ?&gt;\n&lt;script&gt;\n    &lt;!-- Global Site Tag (gtag.js) - Google Analytics --&gt;\n    ... (several lines of code) ...\n&lt;/script&gt;\n&lt;?php endif ?&gt;</code></pre>"},{"location":"building_sites/consent/#configuration","title":"Configuration","text":"<p>All settings are available in the <code>Config\\Consent</code> class, or in the admin settings area.</p> <p>$requireConsent</p> <p>This determines whether the consent system is enabled or not. If <code>true</code>, the consent form will be automatically inserted into all front-end views by the Consent controller filter. If <code>false</code>, the consent system will not display and the helper will always return <code>true</code>. The default value is <code>false</code>;</p> <p>$consentLength</p> <p>The number of days before a visitor is asked for their consent again. The default value is 180 days (6 months).</p> <p>$consentForm</p> <p>The view that is displayed to site visitors that a) asks for their basic consent and b) allows them to accept/reject the various consents. The <code>required</code> consent is unable to be rejected and contains things like the Auth cookie that determines if you're logged in or not.</p> <p>$consentFormStyles $consentFormScripts</p> <p>The views that will be loaded that contain the CSS and Javascript, respectively. The contents of these views will be inserted into each page upon page load.</p> <p>$policyUrl </p> <p>A URL (either full or relative) that points to the page that details the cookie policy. On many sites this will be included in the Privacy Policy or Terms of Service pages, or similar. </p> <p>$consents</p> <p>This is an array of the initial consents that will be asked for in the Consent Form. Each array item includes the alias the consent can be checked with, and the following items: </p> <ul> <li>name: The name as it is displayed to the visitors.</li> <li>desc: The description of the consent that describes the purpose of the cookies/services and what might be     no longer functional if the consent is rejected.  </li> </ul>"},{"location":"building_sites/metadata/","title":"View Metadata","text":"<p>Bonfire provides a <code>Metadata</code> service that simplifies working with the meta infomration, scripts, and styles in your application.</p> <pre><code>$viewMeta = service('viewMeta');\n\n// Add the page title\n$viewMeta-&gt;setTitle('My Site');\n\n// Add misc page meta data\n$viewMeta-&gt;addMeta(['description' =&gt; 'This is the description of the page']);\n$viewMeta-&gt;addMeta(['property' =&gt; 'og:title', 'content' =&gt; 'This is the title of the page']);\n\n// Add link tags\n$viewMeta-&gt;addLink(['rel' =&gt; 'canonical', 'href' =&gt; 'https://example.com/']);\n$viewMeta-&gt;addLink(['rel' =&gt; 'icon', 'href' =&gt; 'favicon.ico', 'type' =&gt; 'image/x-icon']);\n\n// Add script tags\n$viewMeta-&gt;addScript(['src' =&gt; 'https://example.com/js/jquery.min.js']);\n$viewMeta-&gt;addScript(['src' =&gt; 'https://example.com/js/bootstrap.min.js', 'type' =&gt; 'text/javascript']);\n\n// Adding script blocks\n$script = &lt;&lt;&lt;TEXT\n    // all your javscript code here\nTEXT;\n$viewMeta-&gt;addRawScript($script);</code></pre> <p>The <code>addMeta</code>, <code>addLink</code> and <code>addScript</code> methods all take an array of key value pairs. Each of the pairs will have all of the key/value pairs rendered as <code>key=value</code> within the tags, so you can fully customize what each one contains.</p>"},{"location":"building_sites/metadata/#outputting-the-metadata","title":"Outputting the Metadata","text":"<p>Within your layouts you can use the <code>render()</code> method to render any of the data types.</p> <pre><code>// Render the title tag - &lt;title&gt;...&lt;/title&gt;\n&lt;?= $viewMeta-&gt;render('title') ?&gt;\n// Get just the title value\n&lt;?= $viewMeta-&gt;title() ?&gt;\n\n// Render all meta tags\n&lt;?= $viewMeta-&gt;render('meta') ?&gt;\n\n// Render all link tags\n&lt;?= $viewMeta-&gt;render('link') ?&gt;\n\n// Render all script tags\n&lt;?= $viewMeta-&gt;render('script') ?&gt;\n&lt;?= $viewMeta-&gt;render('rawScripts') ?&gt;</code></pre>"},{"location":"building_sites/overview/","title":"Building Sites","text":"<p>While Bonfire focuses on providing a powerful backend area for your sites, a number of the provided tools can  be used within your front-end sites with minimal work. This includes some helper functions for working with dates,  a user consent framework for helping you comply with some of the global privacy laws, like GDPR, new tools to build your views with, and more. </p> <p>Much like any CodeIgniter application, your code will typically live in the <code>/app</code> folder, utilizing the standard <code>Controllers</code>, <code>Models</code>, <code>Views</code>, and other folders for your code. You can, of course, located modules anywhere you wish as long as the autoloader can find it. None of this changes using Bonfire. All of Bonfire's code is kept  in the <code>/bonfire</code> folder, where it will not conflict with your application's code. There are new config files to  keep an eye out for, and Bonfire' <code>UserModel</code> resides in the <code>Models</code> for you to add your own functionality to. </p>"},{"location":"building_sites/settings/","title":"Settings","text":"<p>Bonfire provides a simple interface that you can use in place of calling <code>config()</code> to allow you to read and store config values in the database. If the value has not been updated and saved in the database then the original value from the config file will be used.</p> <p>This allows you to save your application's default state as values in config files, all stored in version control, and still allows your users to override those settings once the site is live. </p>"},{"location":"building_sites/settings/#setup","title":"Setup","text":"<p>A migration is provided that will create the required <code>settings</code> table. No other setup is needed. </p>"},{"location":"building_sites/settings/#usage","title":"Usage","text":"<p>To retrieve a config value use the <code>settings()</code> helper method that is always loaded. </p> <pre><code>// The same as config('App')-&gt;siteName;\n$siteName = setting('App', 'siteName');\n// or\n$siteName = setting()-&gt;get('App', 'siteName');</code></pre> <p>In this case we used the short class name, <code>App</code>, which the <code>config()</code> method automatically locates within the  <code>app/Config</code> directory. If it was from a module, it would be found there. Either way, the fully qualified name is automatically detected by the Settings class to keep values separated from config files that may share the  same name but different namespaces. </p> <p>To save a value, call the <code>set()</code> method on the settings class, providing the class name, the key, and the value. Note that boolean <code>true</code>/<code>false</code> will be converted to strings <code>:true</code> and <code>:false</code> when stored in the database, but will be converted back into a boolean when retrieved. Arrays and objects are serialized when saved, and unserialized when retrieved. </p> <pre><code>setting()-&gt;set('App', 'siteName', 'My Great Site');</code></pre>"},{"location":"users_and_security/","title":"Bonfire - Users and Security","text":"<ul> <li>User Meta</li> </ul>"},{"location":"users_and_security/user_meta/","title":"User Meta Info","text":"<p>By default, Bonfire comes with a pretty limited amount of data saved to a user. Most applications will likely require additional information available to the user, whether this is a bio, a website URL, the name of the school they attended, or anything else. Bonfire provides User Meta information that you can easily define to add additional information to a user. This data is seamlessly integrated into the Create/Edit User form so you do not have to modify that manually.</p>"},{"location":"users_and_security/user_meta/#defining-meta-fields","title":"Defining Meta Fields","text":"<p>All fields are defined within <code>app/Config/Users.php</code>. Two fields are provided (though commented out) as examples. Additionally, if you need labels for fields in validation messages, or if you need custom validation messages, expand the $metaFields 'validation' value into multidimensional array of it's own, with keys <code>label</code> and <code>rules</code> like it is done with 'baz' value below (in case of custom error messages, you can add them in <code>errors</code> subarray, see Validation in Codeigniter 4 documentation  for more details).</p> <pre><code>public $metaFields = [\n        'Example Fields' =&gt; [\n            'foo' =&gt; ['label' =&gt; 'Foo', 'type' =&gt; 'text', 'validation' =&gt; 'permit_empty|string'],\n            'Bar' =&gt; ['type' =&gt; 'text', 'validation' =&gt; 'required|string'],\n            'baz' =&gt; [\n                'label' =&gt; 'Baz',\n                'type' =&gt; 'checkbox',\n                'validation' =&gt; [\n                    'label' =&gt; 'Baz',\n                    'rules' =&gt; 'required|in_list[true,false]'\n                ],\n            ],\n        ],\n    ];</code></pre> <p>Each major grouping within the <code>$metaFields</code> array specifies a fieldset legend name. This provides logical grouping of fields within the Edit User form.</p> <p>Each entry within this fieldset is a single piece of information. The key is the name that you would refer to the field by later. Then each has an array of information that defines it. The array has the following options that you can specify:</p> <ul> <li> <p>label is the label shown for the HTML input (if label is within validation sub-array, it is displayed in validation messages).</p> </li> <li> <p>type is the type of HTML input. Currently most of the text-type inputs are supported (text, password, email, date, number, etc)     as well as checkboxes, and textareas for when you need more information.</p> </li> <li> <p>validation is the set of validation rules that should be applied to this field when saving, or a container for validation array of   a field (with optional <code>label</code>, <code>rules</code>, <code>errors</code> keys).</p> </li> </ul>"},{"location":"users_and_security/user_meta/#using-meta-info","title":"Using Meta Info","text":"<p>The User entity has a trait applied, <code>HasMeta</code>, that provides all the functionality you should need to work with the meta information for that user.</p> <p>meta(string $key)</p> <p>This returns the value of the user's meta named <code>$key</code>, or <code>null</code> if nothing has been set for that user. The name is the key of the array mentioned above.</p> <pre><code>$website = $user-&gt;meta('website_url');</code></pre> <p>allMeta()</p> <p>This returns all meta fields for this user. Note that it returns the full database results, not just the name/value.</p> <pre><code>$meta = $user-&gt;allMeta();\n\nvar_dump($meta);\n\n// Returns:\n[\n    'resource_id' =&gt; 123,\n    'class' =&gt; 'Bonfire\\Users\\User',\n    'key' =&gt; 'website_url',\n    'value' =&gt; 'https://example.com',\n    'created_at' =&gt; '2021-01-12 12:31:12',\n    'updated_at' =&gt; '2021-01-12 12:31:12',\n]</code></pre> <p>hasMeta(string $key)</p> <p>Used to check if a user has a value set for the given meta field.</p> <pre><code>if ($user-&gt;hasMeta('foo')) {\n    //\n}</code></pre> <p>saveMeta(string $key, $value)</p> <p>Saves a single meta value to the user. This is immediately saved. There is no need to save the User through the UserModel.</p> <pre><code>$url = $this-&gt;request-&gt;getPost('website_url');\n$user-&gt;saveMeta('website_url', $url);</code></pre> <p>deleteMeta(string $key)</p> <p>Deletes a single meta value from the user. This is immediately deleted. There is no need to save the User through the UserModel.</p> <pre><code>$user-&gt;deleteMeta('website_url');</code></pre> <p>syncMeta(array $post)</p> <p>Given an array of key/value pairs representing the name of the meta field and it's value, this will update existing meta values, insert new ones, and delete any ones that were not passed in. Useful when grabbing the information from a form and updating all the values at once.</p> <pre><code>$post = [\n    'website_url' =&gt; 'https://example.com',\n    'facebook_name' =&gt; 'johnny.rose'\n];\n$user-&gt;syncMeta($post);</code></pre> <p>metaValidationRules(string $configClass, string $prefix=null)</p> <p>This examines the specified config file and returns an array with the names of each field and their validation rules, ready to be used within CodeIgniter's validation library. If your form groups the name as an array, (like <code>meta[website_url]</code>) you may specify the prefix to append to the field names so that validation will pick it up properly.</p> <pre><code>$rules = $user-&gt;metaValidationRules('\\Config\\Users', 'meta');\n\nvar_dump($rules);\n\n// Returns:\n[\n    'meta.website_url' =&gt; 'required|string|valid_url',\n]</code></pre>"},{"location":"users_and_security/user_meta/#using-meta-on-your-classes","title":"Using Meta on Your Classes","text":"<p>The meta solution is flexible enough to be used outside of Users in your own classes, if desired. There are two steps required to make that work.</p> <ol> <li>Create a Config file. This should include a <code>$metaFields</code> array, formatted as described above.</li> <li>Add the <code>HasMeta</code> trait to the Entity class that represents your resource.</li> </ol> <pre><code>use Bonfire\\Traits\\HasMeta;\nuse CodeIgniter\\Entity;\n\nclass CustomEntity extends Entity\n{\n    use HasMeta;\n}</code></pre>"}]}